package com.tre3p.fileserver.service.impl;

import com.tre3p.fileserver.service.PasswordEncryptorService;
import com.tre3p.fileserver.util.Constants;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;

import static com.tre3p.fileserver.util.Constants.ENCRYPTION_ALGORITHM;
import static javax.crypto.Cipher.DECRYPT_MODE;
import static javax.crypto.Cipher.ENCRYPT_MODE;

@Service
@Slf4j
public class PasswordEncryptorServiceImpl implements PasswordEncryptorService {

    @Value("${security.encryption-key}")
    private String encryptionKey;

    /**
     * Encrypts random generated hashedPassword with user encryption key and return it's byte array representation.
     *
     * @param decryptedPassword - random hashedPassword, which will be generated by @RandomPasswordGenerator
     * @return
     * @throws NoSuchPaddingException
     * @throws NoSuchAlgorithmException
     * @throws InvalidKeyException
     * @throws IllegalBlockSizeException
     * @throws BadPaddingException
     */
    @Override
    public byte[] encrypt(String decryptedPassword) throws
            NoSuchPaddingException,
            NoSuchAlgorithmException,
            InvalidKeyException,
            IllegalBlockSizeException,
            BadPaddingException {
        log.info("+encrypt()");
        Cipher cipher = Cipher.getInstance(Constants.ENCRYPTION_ALGORITHM);
        cipher.init(ENCRYPT_MODE, generateKey(encryptionKey, ENCRYPTION_ALGORITHM));
        byte[] result = cipher.doFinal(decryptedPassword.getBytes());
        log.info("-encrypt()");
        return result;
    }


    /**
     * Decrypting hashedPassword, using user encryptionKey.
     *
     * @param encryptedPassword - hashedPassword, which encrypted with @encrypt method.
     * @return
     * @throws NoSuchPaddingException
     * @throws NoSuchAlgorithmException
     * @throws InvalidKeyException
     * @throws IllegalBlockSizeException
     * @throws BadPaddingException
     */
    @Override
    public byte[] decrypt(byte[] encryptedPassword) throws
            NoSuchPaddingException,
            NoSuchAlgorithmException,
            InvalidKeyException,
            IllegalBlockSizeException,
            BadPaddingException {
        log.info("+decrypt()");
        Cipher cipher = Cipher.getInstance(ENCRYPTION_ALGORITHM);
        cipher.init(DECRYPT_MODE, generateKey(encryptionKey, ENCRYPTION_ALGORITHM));
        byte[] result = cipher.doFinal(encryptedPassword);
        log.info("-decrypt()");
        return result;
    }

    private Key generateKey(final String encryptionKey, final String algo) {
        log.info("generateKey()");
        return new SecretKeySpec(encryptionKey.getBytes(), algo);
    }
}
